import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:jfk_guys/constants/app_colors.dart';
import 'package:jfk_guys/domain/models/summary_data.dart';
import 'package:jfk_guys/domain/providers/firestore_service_provider.dart';
import 'package:jfk_guys/utils/alert_dialog_ui.dart';
import 'package:share_plus/share_plus.dart';
import 'package:intl/intl.dart';
import 'package:confetti/confetti.dart';
import 'package:shimmer/shimmer.dart';

final currencyFormat = NumberFormat("#,##0.00", "en_US");

class SummaryScreen extends ConsumerStatefulWidget {
  final String splitId;
  final String splitName;

  const SummaryScreen({
    super.key,
    required this.splitId,
    required this.splitName,
  });

  @override
  ConsumerState<SummaryScreen> createState() => _SummaryScreenState();
}

class _SummaryScreenState extends ConsumerState<SummaryScreen> {
  late ConfettiController _confettiController;

  @override
  void initState() {
    super.initState();
    _confettiController = ConfettiController(
      duration: const Duration(seconds: 2),
    );
  }

  @override
  void dispose() {
    _confettiController.dispose();
    super.dispose();
  }

  // --- Generate sharable text ---
  String _generateSummaryText(SummaryData summary) {
    final buffer = StringBuffer();
    buffer.writeln("ðŸ’° ${summary.split.name} - Bill Split Summary\n");
    buffer.writeln(
      "Total Expenses: â‚¦${currencyFormat.format(summary.totalExpenses)}",
    );
    buffer.writeln(
      "Participants: ${summary.split.participants.map((p) => p.name).join(', ')}\n",
    );

    if (summary.settlements.isEmpty) {
      buffer.writeln("ðŸŽ‰ Everyone is settled up!\n");
    } else {
      buffer.writeln("ðŸ’¸ Who owes who:");
      for (var s in summary.settlements) {
        buffer.writeln(
          "â€¢ ${s.from} owes ${s.to} â‚¦${currencyFormat.format(s.amount)}",
        );
      }
      buffer.writeln("");
    }

    buffer.writeln("ðŸ“Š Individual breakdown:");
    for (var b in summary.balances) {
      buffer.write(
        "â€¢ ${b.person}: Paid â‚¦${currencyFormat.format(b.totalPaid)}, "
        "Owes â‚¦${currencyFormat.format(b.totalOwed)}",
      );
      if (b.netBalance > 0) {
        buffer.writeln(" (Gets back â‚¦${currencyFormat.format(b.netBalance)})");
      } else if (b.netBalance < 0) {
        buffer.writeln(" (Owes â‚¦${currencyFormat.format(b.netBalance.abs())})");
      } else {
        buffer.writeln(" (Settled)");
      }
    }

    buffer.writeln("\nGenerated by SplitEasy ðŸ“±");
    return buffer.toString();
  }

  Future<void> _handleShare(SummaryData summary) async {
    final text = _generateSummaryText(summary);
    await Share.share(
      text,
      subject: "${summary.split.name} - Bill Split Summary",
    );
  }

  Future<void> _handleCopy(BuildContext context, SummaryData summary) async {
    final text = _generateSummaryText(summary);
    await Clipboard.setData(ClipboardData(text: text));
    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Summary copied to clipboard!")),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final summaryAsync = ref.watch(summaryStreamProvider(widget.splitId));

    return Scaffold(
      appBar: AppBar(
        automaticallyImplyLeading: true,
        backgroundColor: Colors.transparent,
        title: Column(
          spacing: 8,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text("Summary"),
            Text(
              widget.splitName,
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(),
            ),
          ],
        ),
      ),
      body: summaryAsync.when(
        data: (summary) {
          final isSettled = summary.settlements.isEmpty;

          // ðŸŽ‰ Trigger confetti when settled
          if (isSettled) {
            _confettiController.play();
          }

          return Stack(
            alignment: Alignment.topCenter,
            children: [
              CustomScrollView(
                slivers: [
                  SliverPadding(
                    padding: const EdgeInsets.all(16),
                    sliver: SliverList(
                      delegate: SliverChildListDelegate([
                        Card(
                          elevation: 4,
                          child: Padding(
                            padding: const EdgeInsets.all(16),
                            child: Column(
                              children: [
                                const Text(
                                  "Total Group Expenses",
                                  style: TextStyle(),
                                ),
                                Text(
                                  'NGN ${currencyFormat.format(summary.totalExpenses)}',
                                  style: const TextStyle(
                                    fontSize: 28,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                Text(
                                  "Split between ${summary.split.participants.length} people",
                                ),
                              ],
                            ),
                          ),
                        ),
                        const SizedBox(height: 16),

                        // --- Settled vs Owes ---
                        AnimatedSwitcher(
                          duration: const Duration(milliseconds: 600),
                          child: isSettled
                              ? Container(
                                  key: const ValueKey("settled"),
                                  decoration: BoxDecoration(
                                    color: Colors.green[50],
                                    borderRadius: BorderRadius.circular(12),
                                  ),
                                  padding: const EdgeInsets.all(16),
                                  child: Column(
                                    children: const [
                                      Icon(
                                        Icons.check_circle,
                                        color: Colors.green,
                                        size: 40,
                                      ),
                                      SizedBox(height: 8),
                                      Text(
                                        "All Settled Up!",
                                        style: TextStyle(
                                          fontWeight: FontWeight.bold,
                                          color: Colors.black,
                                        ),
                                      ),
                                      Text(
                                        "Everyone has paid their fair share.",
                                        style: TextStyle(color: Colors.black),
                                      ),
                                    ],
                                  ),
                                )
                              : Column(
                                  key: const ValueKey("owes"),
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    const Text(
                                      "Who Owes Who",
                                      style: TextStyle(
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                    const SizedBox(height: 8),
                                    ...summary.settlements.map(
                                      (s) => Card(
                                        child: ListTile(
                                          leading: CircleAvatar(
                                            child: Text(
                                              s.from[0].toUpperCase(),
                                              style: Theme.of(context)
                                                  .textTheme
                                                  .bodyMedium
                                                  ?.copyWith(
                                                    color:
                                                        AppColors.surfaceColor,
                                                  ),
                                            ),
                                          ),
                                          title: Text(
                                            "${s.from} owes ${s.to}",
                                            style: Theme.of(
                                              context,
                                            ).textTheme.bodySmall,
                                          ),
                                          trailing: Container(
                                            decoration: BoxDecoration(
                                              color: Colors.red.shade900,
                                              borderRadius:
                                                  BorderRadius.circular(10),
                                            ),
                                            padding: const EdgeInsets.all(8),
                                            child: Text(
                                              'NGN ${currencyFormat.format(s.amount)}',
                                              style: Theme.of(context)
                                                  .textTheme
                                                  .bodySmall
                                                  ?.copyWith(
                                                    color:
                                                        AppColors.surfaceColor,
                                                  ),
                                            ),
                                          ),
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                        ),
                        const SizedBox(height: 24),

                        // --- Expense Breakdown Section ---
                        const Text(
                          "Expense Breakdown",
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 18,
                          ),
                        ),
                        const SizedBox(height: 12),

                        ...summary.expenses.map((expense) {
                          return Card(
                            margin: const EdgeInsets.symmetric(vertical: 8),
                            child: Padding(
                              padding: const EdgeInsets.all(14),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  // Header
                                  Row(
                                    mainAxisAlignment:
                                        MainAxisAlignment.spaceBetween,
                                    children: [
                                      Text(
                                        expense.description,
                                        style: const TextStyle(
                                          fontWeight: FontWeight.bold,
                                          fontSize: 16,
                                        ),
                                      ),
                                      Text(
                                        "NGN ${currencyFormat.format(expense.amount)}",
                                        style: const TextStyle(
                                          fontWeight: FontWeight.bold,
                                          fontSize: 16,
                                        ),
                                      ),
                                    ],
                                  ),
                                  const SizedBox(height: 4),
                                  Text(
                                    "Paid by ${expense.paidBy} â€¢ ${DateFormat.yMMMd().format(expense.date)}",
                                    style: const TextStyle(color: Colors.grey),
                                  ),
                                  const Divider(height: 16),

                                  // Per participant shares
                                  ...expense.shares.entries.map((entry) {
                                    final percent =
                                        (entry.value / expense.amount * 100)
                                            .toStringAsFixed(0);
                                    return Padding(
                                      padding: const EdgeInsets.symmetric(
                                        vertical: 2,
                                      ),
                                      child: Row(
                                        mainAxisAlignment:
                                            MainAxisAlignment.spaceBetween,
                                        children: [
                                          Text(entry.key),
                                          Text(
                                            "NGN ${currencyFormat.format(entry.value)} ($percent%)",
                                            style: const TextStyle(
                                              fontWeight: FontWeight.w600,
                                            ),
                                          ),
                                        ],
                                      ),
                                    );
                                  }),
                                ],
                              ),
                            ),
                          );
                        }),

                        const SizedBox(height: 24),

                        // --- ðŸ§¾ NEW: Per-Expense Settlements Section ---
                        if (summary.groupedSettlements != null &&
                            summary.groupedSettlements!.isNotEmpty)
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              const Text(
                                "Per-Expense Settlements",
                                style: TextStyle(
                                  fontWeight: FontWeight.bold,
                                  fontSize: 18,
                                ),
                              ),
                              const SizedBox(height: 12),
                              ...summary.groupedSettlements!.map((group) {
                                return Card(
                                  child: ExpansionTile(
                                    tilePadding: const EdgeInsets.symmetric(
                                      horizontal: 16,
                                    ),
                                    title: Text(
                                      group.expenseName,
                                      style: const TextStyle(
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                    children: group.settlements.isEmpty
                                        ? [
                                            const ListTile(
                                              title: Text(
                                                "All settled for this expense ðŸŽ‰",
                                              ),
                                            ),
                                          ]
                                        : group.settlements.map((s) {
                                            return ListTile(
                                              leading: CircleAvatar(
                                                backgroundColor:
                                                    Colors.grey.shade200,
                                                child: Text(
                                                  s.from[0].toUpperCase(),
                                                ),
                                              ),
                                              title: Text(
                                                "${s.from} owes ${s.to}",
                                              ),
                                              trailing: Text(
                                                "NGN ${currencyFormat.format(s.amount)}",
                                                style: const TextStyle(
                                                  fontWeight: FontWeight.bold,
                                                ),
                                              ),
                                            );
                                          }).toList(),
                                  ),
                                );
                              }),
                            ],
                          ),

                        const SizedBox(height: 24),

                        const Text(
                          "Individual Breakdown",
                          style: TextStyle(fontWeight: FontWeight.bold),
                        ),
                      ]),
                    ),
                  ),

                  // --- Individual balances ---
                  SliverList(
                    delegate: SliverChildBuilderDelegate((context, index) {
                      final b = summary.balances[index];
                      return Container(
                        margin: const EdgeInsets.symmetric(
                          vertical: 6,
                          horizontal: 16,
                        ),
                        padding: const EdgeInsets.all(16),
                        decoration: BoxDecoration(
                          color: Theme.of(context).cardColor,
                          borderRadius: BorderRadius.circular(12),
                          border: Border.all(
                            color: Theme.of(context).dividerColor,
                          ),
                        ),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Row(
                                  children: [
                                    CircleAvatar(
                                      child: Text(
                                        b.person[0].toUpperCase(),
                                        style: Theme.of(context)
                                            .textTheme
                                            .bodyMedium
                                            ?.copyWith(
                                              fontWeight: FontWeight.bold,
                                              color: Theme.of(
                                                context,
                                              ).colorScheme.surface,
                                            ),
                                      ),
                                    ),
                                    const SizedBox(width: 10),
                                    Text(b.person),
                                  ],
                                ),
                                const SizedBox(height: 8),
                                Text(
                                  "Paid: NGN ${currencyFormat.format(b.totalPaid)}",
                                  style: Theme.of(context).textTheme.bodySmall,
                                ),
                              ],
                            ),
                            Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                if (b.netBalance > 0)
                                  Chip(
                                    label: Text(
                                      "Gets NGN ${currencyFormat.format(b.netBalance)}",
                                      style: Theme.of(
                                        context,
                                      ).textTheme.bodySmall,
                                    ),
                                    backgroundColor: Colors.green[100],
                                  )
                                else if (b.netBalance < 0)
                                  Chip(
                                    label: Text(
                                      "Owes NGN ${currencyFormat.format(b.netBalance.abs())}",
                                      style: Theme.of(
                                        context,
                                      ).textTheme.bodySmall,
                                    ),
                                    backgroundColor: Colors.red.shade900,
                                    labelStyle: const TextStyle(
                                      color: Colors.white,
                                    ),
                                  )
                                else
                                  Chip(
                                    label: Text(
                                      "Settled",
                                      style: Theme.of(
                                        context,
                                      ).textTheme.bodySmall,
                                    ),
                                  ),
                                Text(
                                  "Share: NGN ${currencyFormat.format(b.totalOwed)}",
                                  style: Theme.of(context).textTheme.bodySmall,
                                ),
                              ],
                            ),
                          ],
                        ),
                      );
                    }, childCount: summary.balances.length),
                  ),

                  // --- Share Buttons ---
                  SliverPadding(
                    padding: const EdgeInsets.all(16),
                    sliver: SliverList(
                      delegate: SliverChildListDelegate([
                        ElevatedButton.icon(
                          onPressed: () => _handleShare(summary),
                          icon: Icon(
                            CupertinoIcons.share,
                            color: Theme.of(context).colorScheme.surface,
                          ),
                          label: Text(
                            "Share Summary",
                            style: TextStyle(
                              color: Theme.of(context).colorScheme.surface,
                              fontFamily: 'Aeonik',
                            ),
                          ),
                        ),
                        const SizedBox(height: 15),
                        ElevatedButton.icon(
                          style: Theme.of(context).elevatedButtonTheme.style
                              ?.copyWith(
                                backgroundColor: const WidgetStatePropertyAll(
                                  Colors.transparent,
                                ),
                                shadowColor: const WidgetStatePropertyAll(
                                  Colors.transparent,
                                ),
                                shape: WidgetStatePropertyAll(
                                  RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(8),
                                    side: BorderSide(
                                      color: Theme.of(
                                        context,
                                      ).colorScheme.primary,
                                    ),
                                  ),
                                ),
                              ),
                          onPressed: () => _handleCopy(context, summary),
                          icon: const Icon(Icons.copy),
                          label: const Text("Copy to Clipboard"),
                        ),
                      ]),
                    ),
                  ),
                ],
              ),

              // ðŸŽ‰ Confetti animation overlay
              Align(
                alignment: Alignment.topCenter,
                child: ConfettiWidget(
                  confettiController: _confettiController,
                  blastDirectionality: BlastDirectionality.explosive,
                  emissionFrequency: 0.05,
                  numberOfParticles: 25,
                  gravity: 0.3,
                  shouldLoop: false,
                ),
              ),
            ],
          );
        },
        loading: () {
          return CustomScrollView(
            slivers: [
              SliverPadding(
                padding: const EdgeInsets.all(16),
                sliver: SliverList(
                  delegate: SliverChildListDelegate([
                    // --- Total summary shimmer ---
                    _buildShimmerCard(height: 100),

                    const SizedBox(height: 16),

                    // --- Who owes who shimmer ---
                    _buildShimmerTitle("Who Owes Who"),
                    _buildShimmerListTile(),
                    _buildShimmerListTile(),
                    _buildShimmerListTile(),

                    const SizedBox(height: 24),

                    // --- Expense Breakdown shimmer ---
                    _buildShimmerTitle("Expense Breakdown"),
                    _buildShimmerCard(height: 130),
                    _buildShimmerCard(height: 130),
                    _buildShimmerCard(height: 130),

                    const SizedBox(height: 24),

                    // --- Individual Breakdown shimmer ---
                    _buildShimmerTitle("Individual Breakdown"),
                    _buildShimmerListTile(),
                    _buildShimmerListTile(),
                    _buildShimmerListTile(),
                  ]),
                ),
              ),
            ],
          );
        },

        error: (err, _) => Center(child: Text("Error: $err")),
      ),
    );
  }
}

Widget _buildShimmerCard({double height = 120}) {
  return Shimmer.fromColors(
    baseColor: Colors.grey.shade300,
    highlightColor: Colors.grey.shade100,
    child: Container(
      height: height,
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
      ),
    ),
  );
}

Widget _buildShimmerTitle(String title) {
  return Padding(
    padding: const EdgeInsets.only(bottom: 8),
    child: Row(
      children: [
        Shimmer.fromColors(
          baseColor: Colors.grey.shade300,
          highlightColor: Colors.grey.shade100,
          child: Container(height: 20, width: 160, color: Colors.white),
        ),
      ],
    ),
  );
}

Widget _buildShimmerListTile() {
  return Shimmer.fromColors(
    baseColor: Colors.grey.shade300,
    highlightColor: Colors.grey.shade100,
    child: Container(
      margin: const EdgeInsets.symmetric(vertical: 6),
      height: 60,
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(10),
      ),
    ),
  );
}
